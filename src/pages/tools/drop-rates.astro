---
import Layout from '../../layouts/Tools.astro'
import FormGrid from '../../components/FormGrid.astro'
import FormGridField from '../../components/FormGridField.astro'

export const prerender = true
---

<Layout title="drop rates">
  <h1>Drop Rate Calculator</h1>

  <form>
    <FormGrid suffix>
      <FormGridField label="Drop rate" for="drop-rates:drop-rate" suffix="%">
        <input
          id="drop-rates:drop-rate"
          name="drop-rate"
          type="text"
          inputmode="decimal"
        />
      </FormGridField>

      <FormGridField label="Nr. of attempts" for="drop-rates:nr-attempts">
        <input
          id="drop-rates:nr-attempts"
          name="nr-attempts"
          type="text"
          inputmode="numeric"
        />
      </FormGridField>

      <hr />

      <FormGridField label="Chance" for="drop-rates:chance" suffix="%">
        <input id="drop-rates:chance" type="text" readonly />
      </FormGridField>

      <FormGridField label="95%" for="drop-rates:p95">
        <input id="drop-rates:p95" type="text" readonly />
      </FormGridField>

      <FormGridField label="99%" for="drop-rates:p99">
        <input id="drop-rates:p99" type="text" readonly />
      </FormGridField>
    </FormGrid>
  </form>
</Layout>

<script>
  import {
    getInputFieldById,
    InputParser,
    InputFormatter,
  } from '../../lib/form-util'

  const Fields = getFields()

  computeChance()
  computePercentiles()

  function getFields() {
    const dropRateEl = getInputFieldById('drop-rates:drop-rate')
    const nrAttemptsEl = getInputFieldById('drop-rates:nr-attempts')
    const chanceEl = getInputFieldById('drop-rates:chance')
    const p95El = getInputFieldById('drop-rates:p95')
    const p99El = getInputFieldById('drop-rates:p99')

    dropRateEl.addEventListener('input', () => {
      computeChance()
      computePercentiles()
    })
    nrAttemptsEl.addEventListener('input', () => {
      computeChance()
    })

    return {
      get dropRate() {
        return InputParser.numeric(dropRateEl.value)
      },

      get nrAttempts() {
        return InputParser.numeric(nrAttemptsEl.value)
      },

      set chance(value: number | null) {
        chanceEl.value = InputFormatter.numeric(value)
      },

      set p95(value: number | null) {
        p95El.value = InputFormatter.numeric(value)
      },

      set p99(value: number | null) {
        p99El.value = InputFormatter.numeric(value)
      },
    }
  }

  function computeChance() {
    const { dropRate, nrAttempts } = Fields

    if (dropRate === null || nrAttempts === null) {
      Fields.chance = null
      return
    }

    const p = normalizeDropRate(dropRate)
    const n = Math.round(nrAttempts)

    if (n <= 0 || p <= 0) {
      Fields.chance = 0
    } else {
      Fields.chance = 100 - 100 * Math.pow(1 - p, n)
    }
  }

  function computePercentiles() {
    const { dropRate } = Fields

    if (dropRate === null) {
      Fields.p95 = null
      Fields.p99 = null
    } else if (dropRate <= 0) {
      Fields.p95 = Infinity
      Fields.p99 = Infinity
    } else {
      Fields.p95 = computePercentile(dropRate, 0.95)
      Fields.p99 = computePercentile(dropRate, 0.99)
    }
  }

  function computePercentile(dropRate: number, percentile: number): number {
    const p = normalizeDropRate(dropRate)

    let lower = 0
    let upper = Number.MAX_SAFE_INTEGER
    let res

    do {
      res = Math.floor((lower + upper) / 2)
      if (1 - Math.pow(1 - p, res) < percentile) {
        lower = res
      } else {
        upper = res
      }
    } while (lower < upper - 1)

    return res
  }

  function normalizeDropRate(dropRate: number): number {
    return (dropRate <= 0 ? 0 : dropRate >= 100 ? 100 : dropRate) / 100
  }
</script>
