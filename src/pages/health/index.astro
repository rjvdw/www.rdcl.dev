---
import Health from '$components/Health'
import {
  handleHealthRecordFormPost,
  type HealthRecordFormErrors,
} from '$components/Health/HealthRecordForm.astro'
import Layout from '$layouts/Base.astro'
import { JwtCookie } from '$lib/auth/cookies'
import { checkJwtOrRedirect } from '$lib/auth/util'
import { UnauthorizedError } from '$lib/errors/UnauthorizedError'
import { get, type Data } from '$lib/health/api'

const jwtCookie = new JwtCookie(Astro.cookies)

const jwt = checkJwtOrRedirect(Astro)
if (jwt instanceof Response) {
  return jwt
}

const from = parseDateFromSearchParams('from')
const to = parseDateFromSearchParams('to')

let error: string | undefined = undefined
let healthRecordFormErrors: HealthRecordFormErrors = {}
let response: Data | undefined = undefined

if (Astro.request.method === 'POST') {
  const result = await handleHealthRecordFormPost(jwt, Astro.request, Astro.url)

  if (typeof result === 'string') {
    return Astro.redirect(result)
  } else {
    healthRecordFormErrors = result
  }
}

try {
  response = await get(jwt, from, to)
} catch (err) {
  if (err instanceof UnauthorizedError) {
    jwtCookie.delete()
    return Astro.redirect('/login')
  }
  error = String(err)
}

function parseDateFromSearchParams(key: string): Date | undefined {
  const spec = Astro.url.searchParams.get(key)

  if (!spec) {
    return undefined
  }

  try {
    return new Date(Date.parse(`${spec}T00:00:00Z`))
  } catch (err) {
    return undefined
  }
}
---

<Layout title="health">
  <h1>Health</h1>
  {error && <p class="error">{error}</p>}
  <Health.RecordForm errors={healthRecordFormErrors} />

  <h2>Settings</h2>
  <Health.Settings settings={response?.settings} />

  <h2>Records</h2>
  <Health.Search from={from} to={to} />

  {response && <Health.Records data={response} />}
</Layout>

<style lang="scss">
  :root {
    --max-page-width: 60rem;
  }
</style>
